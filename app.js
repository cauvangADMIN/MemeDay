// MemeEveryDay - App Logic

// K·∫øt n·ªëi Supabase
const supabaseUrl = 'https://zaskyftvhsjsmgdnejos.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inphc2t5ZnR2aHNqc21nZG5lam9zIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE3ODcxODgsImV4cCI6MjA2NzM2MzE4OH0.NyEOlbOsyz4s5jsTBvo5-9wt3zbETf3aq-gYHDOO_bM';
// S·ª≠a l·∫°i c√°ch kh·ªüi t·∫°o client Supabase
const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);

// ƒê∆∞·ªùng d·∫´n c∆° s·ªü ƒë·∫øn bucket ch·ª©a ·∫£nh meme
const BUCKET_URL = 'https://zaskyftvhsjsmgdnejos.supabase.co/storage/v1/object/public/meme-images/';

// Meme data - S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n t·ª´ Supabase bucket
const MEMES = [
  { id: 1, img: `${BUCKET_URL}/meme_01.jpg`, likes: 42, comments: 7, liked: false },
  { id: 2, img: `${BUCKET_URL}/meme_02.jpg`, likes: 28, comments: 5, liked: false },
  { id: 3, img: `${BUCKET_URL}/meme_03.jpg`, likes: 35, comments: 9, liked: false },
  { id: 4, img: `${BUCKET_URL}/meme_04.jpg`, likes: 19, comments: 3, liked: false },
  { id: 5, img: `${BUCKET_URL}/meme_05.jpg`, likes: 56, comments: 12, liked: false },
  { id: 6, img: `${BUCKET_URL}/meme_06.jpg`, likes: 31, comments: 6, liked: false }
];

// Ch·ªß ƒë·ªÅ meme
const TOPICS = [
  { label: "Funny", icon: "üòÇ" },
  { label: "Anime", icon: "üé≠" },
  { label: "Gaming", icon: "üéÆ" },
  { label: "Animals", icon: "üê±" },
  { label: "Trending", icon: "üî•" },
  { label: "Random", icon: "üé≤" }
];

// Render meme feed
function renderFeed(filterTag = '', keyword = '') {
  const el = document.getElementById("feed");
  let data = MEMES;
  
  // Kh√¥ng c·∫ßn filter theo tag v√† keyword v√¨ ƒë√¢y l√† trang meme ƒë∆°n gi·∫£n
  // Nh∆∞ng gi·ªØ l·∫°i tham s·ªë ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code g·ªçi h√†m
  
  el.innerHTML = data.map(meme => `
    <div class="card">
      <div class="post-header">
        <img src="https://randomuser.me/api/portraits/men/32.jpg" class="post-avatar"/>
        <div>
          <span class="post-author">Admin</span>
        </div>
      </div>
      <div class="meme-container">
        <img src="${meme.img}" class="meme-image" alt="Meme">
      </div>
      <div class="post-actions">
        <button class="action-btn${meme.liked?' liked':''}" onclick="likeMeme(${meme.id})">
          ‚ù§Ô∏è <span>${meme.likes}</span>
        </button>
        <button class="action-btn" onclick="openModal('B√¨nh lu·∫≠n meme #${meme.id} (fake modal)')">
          üí¨ ${meme.comments}
        </button>
      </div>
    </div>
  `).join('');
}

// Render ch·ªß ƒë·ªÅ
function renderChips(selected) {
  const el = document.getElementById("chipList");
  el.innerHTML = TOPICS.map(tp => `
    <span class="chip${selected && selected===tp.label ? ' selected' : ''}" onclick="filterByTag('${tp.label}')">${tp.icon} ${tp.label}</span>
  `).join('');
}

// X·ª≠ l√Ω like meme
function likeMeme(id) {
  const idx = MEMES.findIndex(m => m.id === id);
  MEMES[idx].liked = !MEMES[idx].liked;
  MEMES[idx].likes += MEMES[idx].liked ? 1 : -1;
  renderFeed(currentTag, document.getElementById('searchInput').value);
}

// X·ª≠ l√Ω filter theo tag
let currentTag = '';
function filterByTag(tag) {
  currentTag = tag === currentTag ? '' : tag;
  renderChips(currentTag);
  renderFeed(currentTag, document.getElementById('searchInput').value);
}

// X·ª≠ l√Ω modal
function openModal(text) {
  document.getElementById('modalText').innerText = text;
  document.getElementById('modal').style.display = "flex";
}

function closeModal() {
  document.getElementById('modal').style.display = "none";
}

// X·ª≠ l√Ω menu mobile
function setupMobileMenu() {
  document.getElementById('menuToggle').addEventListener('click', function() {
    document.getElementById('mobileNav').classList.toggle('active');
  });
}

// X·ª≠ l√Ω n√∫t cu·ªôn l√™n ƒë·∫ßu trang
function setupScrollToTop() {
  const scrollTopBtn = document.getElementById('scrollTopBtn');
  
  window.addEventListener('scroll', function() {
    if (window.pageYOffset > 300) {
      scrollTopBtn.classList.add('visible');
    } else {
      scrollTopBtn.classList.remove('visible');
    }
  });
  
  scrollTopBtn.addEventListener('click', function() {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });
}

// X·ª≠ l√Ω thanh ƒëi·ªÅu h∆∞·ªõng d∆∞·ªõi cho mobile
function setupBottomNav() {
  function toggleBottomNav() {
    const bottomNav = document.getElementById('bottomNav');
    if (window.innerWidth <= 480) { // Ch·ªâ hi·ªÉn th·ªã tr√™n mobile th·ª±c s·ª±
      bottomNav.style.display = 'flex';
    } else {
      bottomNav.style.display = 'none';
    }
  }
  
  window.addEventListener('resize', toggleBottomNav);
  toggleBottomNav(); // G·ªçi l·∫ßn ƒë·∫ßu khi t·∫£i trang
}

// X·ª≠ l√Ω t√¨m ki·∫øm
function setupSearch() {
  document.getElementById('searchInput').addEventListener('input', (e) => {
    renderFeed(currentTag, e.target.value);
  });
}

// H√†m l·∫•y d·ªØ li·ªáu meme t·ª´ Supabase
async function fetchMemesFromSupabase() {
  try {
    // Gi·∫£ s·ª≠ b·∫°n c√≥ b·∫£ng 'memes' trong Supabase
    const { data, error } = await supabase
      .from('memes')
      .select('*');
    
    if (error) throw error;
    
    // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·ªÉ s·ª≠ d·ª•ng bucket
    const processedData = data.map(meme => ({
      ...meme,
      img: `${BUCKET_URL}/${meme.img_filename}` // Gi·∫£ s·ª≠ c√≥ c·ªôt img_filename trong b·∫£ng
    }));
    
    return processedData;
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ Supabase:', error);
    return MEMES; // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
  }
}

// Kh·ªüi t·∫°o trang
async function initPage() {
  setupMobileMenu();
  setupScrollToTop();
  setupBottomNav();
  setupSearch();
  
  renderChips();
  
  // B·∫°n c√≥ th·ªÉ b·ªè comment d√≤ng d∆∞·ªõi ƒë√¢y n·∫øu mu·ªën l·∫•y d·ªØ li·ªáu t·ª´ Supabase
  // const memesData = await fetchMemesFromSupabase();
  // if (memesData && memesData.length > 0) {
  //   MEMES.length = 0; // X√≥a d·ªØ li·ªáu c≈©
  //   MEMES.push(...memesData); // Th√™m d·ªØ li·ªáu m·ªõi
  // }
  
  renderFeed();
}

// G·ªçi h√†m kh·ªüi t·∫°o khi trang ƒë√£ t·∫£i xong
document.addEventListener('DOMContentLoaded', initPage);