// MemeEveryDay - App Logic

// K·∫øt n·ªëi Supabase
const supabaseUrl = 'https://zaskyftvhsjsmgdnejos.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inphc2t5ZnR2aHNqc21nZG5lam9zIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE3ODcxODgsImV4cCI6MjA2NzM2MzE4OH0.NyEOlbOsyz4s5jsTBvo5-9wt3zbETf3aq-gYHDOO_bM';

let supabase; // <-- ch·ªâ khai b√°o let, KH√îNG const!

// ƒê·∫£m b·∫£o th∆∞ vi·ªán Supabase ƒë√£ ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', async function() {
  // N·∫øu d√πng window.supabase th√¨ ph·∫£i check ƒë√∫ng script ƒë√£ load xong!
  if (typeof window.supabase === 'undefined') {
    alert('Th∆∞ vi·ªán Supabase ch∆∞a ƒë∆∞·ª£c load!');
    return;
  }
  supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
  await initPage();
});

// ƒê∆∞·ªùng d·∫´n c∆° s·ªü ƒë·∫øn bucket ch·ª©a ·∫£nh meme
const BUCKET_URL = 'https://zaskyftvhsjsmgdnejos.supabase.co/storage/v1/object/public/meme-images';

// Meme data - S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ Supabase
let MEMES = [];

// Ch·ªß ƒë·ªÅ meme
const TOPICS = [
  { label: "T·ªïng h·ª£p", icon: "üîç" },
  { label: "Animal", icon: "üê±" },
  { label: "Anime", icon: "üé≠" },
  { label: "Human", icon: "üë®" },
  { label: "Dark", icon: "üåë" },
  { label: "Game", icon: "üéÆ" },
  { label: "Sex Joke", icon: "üîû" }
];

// Render meme feed
function renderFeed() {
  const el = document.getElementById("feed");
  if (!MEMES.length) {
    el.innerHTML = '<div class="card"><p>Kh√¥ng c√≥ meme n√†o ƒë·ªÉ hi·ªÉn th·ªã.</p></div>';
    return;
  }
  el.innerHTML = MEMES.map(meme => `
    <div class="card">
      <div class="post-header">
        <img src="assets/images/admin.jpg" class="post-avatar"/>
        <div><span class="post-author">Admin</span></div>
      </div>
      <div class="meme-container">
        <img src="${meme.img}" class="meme-image" alt="Meme" />
      </div>
      <div class="post-actions">
        <button class="action-btn${meme.liked?' liked':''}" onclick="likeMeme(${meme.id})">
          ‚ù§Ô∏è <span>${meme.likes}</span>
        </button>
        <span class="meme-category">${meme.category ? meme.category.toUpperCase() : 'UNCATEGORIZED'}</span>
      </div>
    </div>
  `).join('');
}


// Render ch·ªß ƒë·ªÅ
function renderChips(selected) {
  const el = document.getElementById("chipList");
  el.innerHTML = TOPICS.map(tp => `
    <span class="chip${selected && selected===tp.label ? ' selected' : ''}" onclick="filterByTag('${tp.label}')">${tp.icon} ${tp.label}</span>
  `).join('');
}

// X·ª≠ l√Ω like meme
async function likeMeme(id) {
  // L·∫•y tr·∫°ng th√°i like t·ª´ localStorage
  const likedMemes = JSON.parse(localStorage.getItem('liked_memes') || '{}');

  if (likedMemes[id]) {
    alert('B·∫°n ƒë√£ like meme n√†y r·ªìi!');
    return;
  }

  const idx = MEMES.findIndex(m => m.id === id);
  if (idx < 0) return;
  const meme = MEMES[idx];

  meme.liked = true;
  meme.likes += 1;
  renderFeed();

  // Update DB
  try {
    const { error } = await supabase
      .from('memes')
      .update({ likes: meme.likes })
      .eq('id', id);
    if (error) {
      // N·∫øu l·ªói, rollback l·∫°i
      meme.liked = false;
      meme.likes -= 1;
      renderFeed();
      alert("C√≥ l·ªói khi l∆∞u like l√™n server!");
      return;
    }
    // Ghi l·∫°i tr·∫°ng th√°i ƒë√£ like v√†o localStorage
    likedMemes[id] = true;
    localStorage.setItem('liked_memes', JSON.stringify(likedMemes));
  } catch (err) {
    meme.liked = false;
    meme.likes -= 1;
    renderFeed();
    alert("C√≥ l·ªói khi l∆∞u like!");
  }
}

// X·ª≠ l√Ω filter theo tag
let currentTag = '';
function filterByTag(tag) {
  currentTag = tag === currentTag ? '' : tag;
  renderChips(currentTag);
  // Chuy·ªÉn ƒë·ªïi category sang ch·ªØ th∆∞·ªùng khi query
  const categoryQuery = currentTag ? currentTag.toLowerCase() : '';
  fetchAndRenderMemes(categoryQuery, 'created_at', false);
}

// X·ª≠ l√Ω modal
function openModal(text) {
  document.getElementById('modalText').innerText = text;
  document.getElementById('modal').style.display = "flex";
}

function closeModal() {
  document.getElementById('modal').style.display = "none";
}

// X·ª≠ l√Ω menu mobile
function setupMobileMenu() {
  document.getElementById('menuToggle').addEventListener('click', function() {
    document.getElementById('mobileNav').classList.toggle('active');
  });
}

// X·ª≠ l√Ω n√∫t cu·ªôn l√™n ƒë·∫ßu trang
function setupScrollToTop() {
  const scrollTopBtn = document.getElementById('scrollTopBtn');
  
  window.addEventListener('scroll', function() {
    if (window.pageYOffset > 300) {
      scrollTopBtn.classList.add('visible');
    } else {
      scrollTopBtn.classList.remove('visible');
    }
  });
  
  scrollTopBtn.addEventListener('click', function() {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });
}

// X·ª≠ l√Ω thanh ƒëi·ªÅu h∆∞·ªõng d∆∞·ªõi cho mobile
function setupBottomNav() {
  function toggleBottomNav() {
    const bottomNav = document.getElementById('bottomNav');
    if (window.innerWidth <= 480) { // Ch·ªâ hi·ªÉn th·ªã tr√™n mobile th·ª±c s·ª±
      bottomNav.style.display = 'flex';
    } else {
      bottomNav.style.display = 'none';
    }
  }
  
  window.addEventListener('resize', toggleBottomNav);
  toggleBottomNav(); // G·ªçi l·∫ßn ƒë·∫ßu khi t·∫£i trang
  
  // Th√™m s·ª± ki·ªán click cho c√°c li√™n k·∫øt trong bottom-nav
  const bottomNavLinks = document.querySelectorAll('#bottomNav a');
  bottomNavLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      
      // X√≥a class active kh·ªèi t·∫•t c·∫£ c√°c li√™n k·∫øt
      bottomNavLinks.forEach(l => l.classList.remove('active'));
      
      // Th√™m class active cho li√™n k·∫øt ƒë∆∞·ª£c click
      this.classList.add('active');
      
      // ƒê·ªìng b·ªô v·ªõi nav bar tr√™n desktop
      const linkText = this.textContent.trim();
      const desktopNavLinks = document.querySelectorAll('.nav a');
      
      desktopNavLinks.forEach(desktopLink => {
        if (desktopLink.textContent.trim() === linkText) {
          // K√≠ch ho·∫°t s·ª± ki·ªán click tr√™n li√™n k·∫øt desktop t∆∞∆°ng ·ª©ng
          desktopLink.click();
        }
      });
    });
  });
}

// X·ª≠ l√Ω t√¨m ki·∫øm
function setupSearch() {
  document.getElementById('searchInput').addEventListener('input', (e) => {
    const searchTerm = e.target.value.trim().toLowerCase();
    if (searchTerm) {
      // L·ªçc memes theo t·ª´ kh√≥a t√¨m ki·∫øm
      const filteredMemes = MEMES.filter(meme => 
        meme.category && meme.category.toLowerCase().includes(searchTerm)
      );
      // C·∫≠p nh·∫≠t UI v·ªõi k·∫øt qu·∫£ l·ªçc
      renderFilteredMemes(filteredMemes);
    } else if (currentTag) {
      // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a t√¨m ki·∫øm nh∆∞ng c√≥ category, hi·ªÉn th·ªã theo category
      const categoryQuery = currentTag.toLowerCase();
      fetchAndRenderMemes(categoryQuery, 'created_at', false);
    } else {
      // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a t√¨m ki·∫øm v√† kh√¥ng c√≥ category, hi·ªÉn th·ªã t·∫•t c·∫£
      fetchAndRenderMemes('', 'created_at', false);
    }
  });
}

// H√†m render memes ƒë√£ ƒë∆∞·ª£c l·ªçc
function renderFilteredMemes(filteredMemes) {
  const el = document.getElementById("feed");
  if (!filteredMemes.length) {
    el.innerHTML = '<div class="card"><p>Kh√¥ng c√≥ meme n√†o ph√π h·ª£p v·ªõi t√¨m ki·∫øm.</p></div>';
    return;
  }
  el.innerHTML = filteredMemes.map(meme => `
    <div class="card">
      <div class="post-header">
        <img src="assets/images/admin.jpg" class="post-avatar"/>
        <div><span class="post-author">Admin</span></div>
      </div>
      <div class="meme-container">
        <img src="${meme.img}" class="meme-image" alt="Meme" />
      </div>
      <div class="post-actions">
        <button class="action-btn${meme.liked?' liked':''}" onclick="likeMeme(${meme.id})">
          ‚ù§Ô∏è <span>${meme.likes}</span>
        </button>
        <span class="meme-category">${meme.category ? meme.category.toUpperCase() : 'UNCATEGORIZED'}</span>
      </div>
    </div>
  `).join('');
}

// H√†m l·∫•y d·ªØ li·ªáu meme t·ª´ Supabase
async function fetchMemesFromSupabase(category = '', sortBy = 'created_at', ascending = false) {
  try {
    let query = supabase
      .from('memes')
      .select('*');
    
    // N·∫øu c√≥ category ƒë∆∞·ª£c ch·ªçn, th√™m ƒëi·ªÅu ki·ªán l·ªçc
    if (category && category !== 't·ªïng h·ª£p') {
      query = query.eq('category', category);
    }
    
    // S·∫Øp x·∫øp theo tr∆∞·ªùng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    query = query.order(sortBy, { ascending: ascending });
    
    const { data, error } = await query;
    if (error) throw error;

    // L·∫•y tr·∫°ng th√°i liked t·ª´ localStorage
    const likedMemes = JSON.parse(localStorage.getItem('liked_memes') || '{}');

    return data.map(meme => ({
      id: meme.id,
      img: `${BUCKET_URL}/${meme.img_filename}`,
      likes: meme.likes || 0,
      liked: !!likedMemes[meme.id],
      category: meme.category || ''
    }));
  } catch (err) {
    console.error('L·ªói khi fetch:', err);
    return [];
  }
}

// H√†m fetch v√† render memes theo category v√† s·∫Øp x·∫øp
async function fetchAndRenderMemes(category = '', sortBy = 'created_at', ascending = false) {
  MEMES = await fetchMemesFromSupabase(category, sortBy, ascending);
  renderFeed();
}

// X·ª≠ l√Ω c√°c n√∫t tr√™n nav bar
function setupNavigation() {
  // L·∫•y t·∫•t c·∫£ c√°c li√™n k·∫øt trong nav
  const navLinks = document.querySelectorAll('.nav a');
  
  // Th√™m s·ª± ki·ªán click cho t·ª´ng li√™n k·∫øt
  navLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      
      // X√≥a class active kh·ªèi t·∫•t c·∫£ c√°c li√™n k·∫øt
      navLinks.forEach(l => l.classList.remove('active'));
      
      // Th√™m class active cho li√™n k·∫øt ƒë∆∞·ª£c click
      this.classList.add('active');
      
      // X·ª≠ l√Ω theo t·ª´ng lo·∫°i li√™n k·∫øt
      const linkText = this.textContent.trim();
      
      switch(linkText) {
        case 'Trang ch·ªß':
          // Hi·ªÉn th·ªã t·∫•t c·∫£ meme, s·∫Øp x·∫øp theo created_at m·ªõi nh·∫•t
          currentTag = '';
          renderChips();
          fetchAndRenderMemes('', 'created_at', false);
          break;
          
        case 'M·ªõi nh·∫•t':
          // Hi·ªÉn th·ªã meme theo created_at, s·∫Øp x·∫øp t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
          currentTag = '';
          renderChips();
          fetchAndRenderMemes('', 'created_at', false);
          break;
          
        case 'Xu h∆∞·ªõng':
          // Hi·ªÉn th·ªã meme theo likes, s·∫Øp x·∫øp t·ª´ nhi·ªÅu nh·∫•t ƒë·∫øn √≠t nh·∫•t
          // Nh∆∞ng ch·ªâ l·∫•y nh·ªØng meme m·ªõi (trong 7 ng√†y g·∫ßn ƒë√¢y)
          currentTag = '';
          renderChips();
          fetchTrendingMemes();
          break;
          
        case 'Y√™u th√≠ch':
          // Hi·ªÉn th·ªã meme theo likes, s·∫Øp x·∫øp t·ª´ nhi·ªÅu nh·∫•t ƒë·∫øn √≠t nh·∫•t
          currentTag = '';
          renderChips();
          fetchAndRenderMemes('', 'likes', false);
          break;
      }
    });
  });
}

// H√†m l·∫•y meme xu h∆∞·ªõng (m·ªõi v√† nhi·ªÅu like)
async function fetchTrendingMemes() {
  try {
    // L·∫•y meme m·ªõi (7 ng√†y g·∫ßn ƒë√¢y) v√† s·∫Øp x·∫øp theo l∆∞·ª£t like
    const { data, error } = await supabase
      .from('memes')
      .select('*')
      .order('likes', { ascending: false });
    
    if (error) throw error;
    
    // L·∫•y tr·∫°ng th√°i liked t·ª´ localStorage
    const likedMemes = JSON.parse(localStorage.getItem('liked_memes') || '{}');
    
    MEMES = data.map(meme => ({
      id: meme.id,
      img: `${BUCKET_URL}/${meme.img_filename}`,
      likes: meme.likes || 0,
      liked: !!likedMemes[meme.id],
      category: meme.category || ''
    }));
    
    renderFeed();
  } catch (err) {
    console.error('L·ªói khi fetch xu h∆∞·ªõng:', err);
    MEMES = [];
    renderFeed();
  }
}

// Kh·ªüi t·∫°o trang
async function initPage() {
  setupMobileMenu();
  setupScrollToTop();
  setupBottomNav();
  setupSearch();
  setupNavigation();
  renderChips();

  // Khi trang web ƒë∆∞·ª£c t·∫£i, hi·ªÉn th·ªã t·∫•t c·∫£ meme t·ª´ database, s·∫Øp x·∫øp theo created_at m·ªõi nh·∫•t
  await fetchAndRenderMemes('', 'created_at', false);
}